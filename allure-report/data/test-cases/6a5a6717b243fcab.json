{"uid":"6a5a6717b243fcab","name":"test_search_user_params_005[getDataForSearchUser4]","fullName":"testCases.test_Search_User_params.Test_Search_User_params#test_search_user_params_005","historyId":"ad6306ad69748b1d91c93ba51afbd49d","time":{"start":1723394775488,"stop":1723394782845,"duration":7357},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Search_User_params.Test_Search_User_params object at 0x000002376CD955B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6cb8e19fdd0f0706f0c377096fad873a\")>\ngetDataForSearchUser = ('demo', 'fail')\n\n    @pytest.mark.regression\n    @pytest.mark.group2\n    def test_search_user_params_005(self,setup,getDataForSearchUser):\n        self.driver = setup\n        self.lp = Login_Class(self.driver)\n        self.lp.Click_Login_Link()\n        self.lp.Enter_Username(self.Username)\n        self.lp.Enter_Password(self.Password)\n        self.lp.Click_Login_Button()\n        self.su = Search_User_Class(self.driver)\n        self.su.Click_Link_User_Management()\n    \n        Search_Username = getDataForSearchUser[0]\n        print(Search_Username)\n        Expected_result = getDataForSearchUser[1]\n        print(Expected_result)\n    \n        self.su.Enter_UserName(Search_Username)\n        self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        time.sleep(4)\n        self.su.Click_Search_User_Button()\n        if self.su.Validate_Search_User() == \"pass\" and Expected_result == \"pass\":\n            assert True\n        elif self.su.Validate_Search_User() == \"pass\" and Expected_result == \"fail\":\n>           assert False\nE           assert False\n\ntestCases\\test_Search_User_params.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1723394771789,"stop":1723394775488,"duration":3699},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"getDataForSearchUser","time":{"start":1723394775488,"stop":1723394775488,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Search_User_params.Test_Search_User_params object at 0x000002376CD955B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6cb8e19fdd0f0706f0c377096fad873a\")>\ngetDataForSearchUser = ('demo', 'fail')\n\n    @pytest.mark.regression\n    @pytest.mark.group2\n    def test_search_user_params_005(self,setup,getDataForSearchUser):\n        self.driver = setup\n        self.lp = Login_Class(self.driver)\n        self.lp.Click_Login_Link()\n        self.lp.Enter_Username(self.Username)\n        self.lp.Enter_Password(self.Password)\n        self.lp.Click_Login_Button()\n        self.su = Search_User_Class(self.driver)\n        self.su.Click_Link_User_Management()\n    \n        Search_Username = getDataForSearchUser[0]\n        print(Search_Username)\n        Expected_result = getDataForSearchUser[1]\n        print(Expected_result)\n    \n        self.su.Enter_UserName(Search_Username)\n        self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        time.sleep(4)\n        self.su.Click_Search_User_Button()\n        if self.su.Validate_Search_User() == \"pass\" and Expected_result == \"pass\":\n            assert True\n        elif self.su.Validate_Search_User() == \"pass\" and Expected_result == \"fail\":\n>           assert False\nE           assert False\n\ntestCases\\test_Search_User_params.py:38: AssertionError","steps":[],"attachments":[{"uid":"2dba85bad2032292","name":"stdout","source":"2dba85bad2032292.txt","type":"text/plain","size":10}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1723394782862,"stop":1723394784950,"duration":2088},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"group2"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_Search_User_params"},{"name":"subSuite","value":"Test_Search_User_params"},{"name":"host","value":"RAMJAN-NADAF"},{"name":"thread","value":"9060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_Search_User_params"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getDataForSearchUser","value":"('demo', 'fail')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["regression","group2"]},"source":"6a5a6717b243fcab.json","parameterValues":["('demo', 'fail')"]}
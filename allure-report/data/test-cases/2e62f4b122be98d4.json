{"uid":"2e62f4b122be98d4","name":"test_search_user_Excel_006","fullName":"testCases.test_Search_User_Excel.Test_Search_User_Excel#test_search_user_Excel_006","historyId":"48559e08ab6b47e4a9d8547c826a66e4","time":{"start":1723394703887,"stop":1723394714862,"duration":10975},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Search_User_Excel.Test_Search_User_Excel object at 0x000002376CD6B440>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dec51939c9209a2c3187dd06953d825e\")>\n\n    @pytest.mark.regression\n    @pytest.mark.group2\n    def test_search_user_Excel_006(self, setup):\n        self.driver = setup\n        self.lp = Login_Class(self.driver)\n        self.lp.Click_Login_Link()\n        self.lp.Enter_Username(self.Username)\n        self.lp.Enter_Password(self.Password)\n        self.lp.Click_Login_Button()\n        self.su = Search_User_Class(self.driver)\n        self.su.Click_Link_User_Management()\n        self.row_count = XLutilies.RowCount(self.Excel_file_Path, \"SearchUser\")\n        print(\"row count-->\" + str(self.row_count))\n        Stauts_List = []\n    \n        for r in range(2, self.row_count + 1):\n            self.Search_Username = XLutilies.ReadData(self.Excel_file_Path, \"SearchUser\", r, 2)\n            self.ExpectedResult = XLutilies.ReadData(self.Excel_file_Path, \"SearchUser\", r, 3)\n            self.su.Click_Link_User_Management()\n            self.su.Enter_UserName(self.Search_Username)\n            self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n            # time.sleep(5)\n            self.su.Click_Search_User_Button()\n            # time.sleep(5)\n            if self.su.Validate_Search_User() == \"pass\" and self.ExpectedResult == \"pass\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"pass\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"pass\")\n                Stauts_List.append(\"pass\")\n                # assert True\n            elif self.su.Validate_Search_User() == \"pass\" and self.ExpectedResult == \"fail\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"pass\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"fail\")\n                Stauts_List.append(\"fail\")\n                # assert False\n            elif self.su.Validate_Search_User() == \"fail\" and self.ExpectedResult == \"pass\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"fail\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"fail\")\n                Stauts_List.append(\"fail\")\n            # assert False\n            elif self.su.Validate_Search_User() == \"fail\" and self.ExpectedResult == \"fail\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"fail\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"pass\")\n                Stauts_List.append(\"pass\")\n                # assert True\n    \n        print(\"Testcase pass count-->\" + str(Stauts_List.count(\"pass\")))\n        print(\"Testcase fail count-->\" + str(Stauts_List.count(\"fail\")))\n        print(Stauts_List)\n        if \"fail\" not in Stauts_List:\n            assert True\n        else:\n>           assert False\nE           assert False\n\ntestCases\\test_Search_User_Excel.py:67: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1723394699394,"stop":1723394703887,"duration":4493},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Search_User_Excel.Test_Search_User_Excel object at 0x000002376CD6B440>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dec51939c9209a2c3187dd06953d825e\")>\n\n    @pytest.mark.regression\n    @pytest.mark.group2\n    def test_search_user_Excel_006(self, setup):\n        self.driver = setup\n        self.lp = Login_Class(self.driver)\n        self.lp.Click_Login_Link()\n        self.lp.Enter_Username(self.Username)\n        self.lp.Enter_Password(self.Password)\n        self.lp.Click_Login_Button()\n        self.su = Search_User_Class(self.driver)\n        self.su.Click_Link_User_Management()\n        self.row_count = XLutilies.RowCount(self.Excel_file_Path, \"SearchUser\")\n        print(\"row count-->\" + str(self.row_count))\n        Stauts_List = []\n    \n        for r in range(2, self.row_count + 1):\n            self.Search_Username = XLutilies.ReadData(self.Excel_file_Path, \"SearchUser\", r, 2)\n            self.ExpectedResult = XLutilies.ReadData(self.Excel_file_Path, \"SearchUser\", r, 3)\n            self.su.Click_Link_User_Management()\n            self.su.Enter_UserName(self.Search_Username)\n            self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n            # time.sleep(5)\n            self.su.Click_Search_User_Button()\n            # time.sleep(5)\n            if self.su.Validate_Search_User() == \"pass\" and self.ExpectedResult == \"pass\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"pass\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"pass\")\n                Stauts_List.append(\"pass\")\n                # assert True\n            elif self.su.Validate_Search_User() == \"pass\" and self.ExpectedResult == \"fail\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"pass\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"fail\")\n                Stauts_List.append(\"fail\")\n                # assert False\n            elif self.su.Validate_Search_User() == \"fail\" and self.ExpectedResult == \"pass\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"fail\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"fail\")\n                Stauts_List.append(\"fail\")\n            # assert False\n            elif self.su.Validate_Search_User() == \"fail\" and self.ExpectedResult == \"fail\":\n                actual_result = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 4, \"fail\")\n                Stauts = XLutilies.WriteData(self.Excel_file_Path, \"SearchUser\", r, 5, \"pass\")\n                Stauts_List.append(\"pass\")\n                # assert True\n    \n        print(\"Testcase pass count-->\" + str(Stauts_List.count(\"pass\")))\n        print(\"Testcase fail count-->\" + str(Stauts_List.count(\"fail\")))\n        print(Stauts_List)\n        if \"fail\" not in Stauts_List:\n            assert True\n        else:\n>           assert False\nE           assert False\n\ntestCases\\test_Search_User_Excel.py:67: AssertionError","steps":[],"attachments":[{"uid":"2a2b52db9f7d9ef7","name":"stdout","source":"2a2b52db9f7d9ef7.txt","type":"text/plain","size":111}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1723394714878,"stop":1723394716971,"duration":2093},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"group2"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_Search_User_Excel"},{"name":"subSuite","value":"Test_Search_User_Excel"},{"name":"host","value":"RAMJAN-NADAF"},{"name":"thread","value":"9060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_Search_User_Excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["regression","group2"]},"source":"2e62f4b122be98d4.json","parameterValues":[]}